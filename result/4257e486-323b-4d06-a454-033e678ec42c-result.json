{"name": "test_add_member_from_memberlistpage", "status": "broken", "statusDetails": {"message": "Exception", "trace": "self = <page.addmember_page.AddMemberPage object at 0x000001DBABF22DF0>, args = ('link text', '保存'), kwargs = {}\n\n    def inner(self, *args, **kwargs):\n        try:\n>           return func(self, *args, **kwargs)\n\npage\\base.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.addmember_page.AddMemberPage object at 0x000001DBABF22DF0>, by = 'link text', value = '保存'\n\n    @output_exception\n    def do_find(self, by, value=None):\n        if value:\n>           return self.driver.find_element(by, value)\n\npage\\base.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"aac53209e6b205acbe46076fcf9f787d\")>, by = 'link text', value = '保存'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"aac53209e6b205acbe46076fcf9f787d\")>, driver_command = 'findElement'\nparams = {'using': 'link text', 'value': '保存'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DBAB343400>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...wn>\\\\n#16 0x55daa4649847 \\\\u003Cunknown>\\\\n#17 0x55daa4659243 \\\\u003Cunknown>\\\\n#18 0x7fdf6bd58609 start_thread\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"保存\"}\nE         (Session info: chrome=114.0.5735.133)\nE       Stacktrace:\nE       #0 0x55daa46604e3 <unknown>\nE       #1 0x55daa438fc76 <unknown>\nE       #2 0x55daa43cbc96 <unknown>\nE       #3 0x55daa43cbdc1 <unknown>\nE       #4 0x55daa44057f4 <unknown>\nE       #5 0x55daa43eb03d <unknown>\nE       #6 0x55daa440330e <unknown>\nE       #7 0x55daa43eade3 <unknown>\nE       #8 0x55daa43c02dd <unknown>\nE       #9 0x55daa43c134e <unknown>\nE       #10 0x55daa46203e4 <unknown>\nE       #11 0x55daa46243d7 <unknown>\nE       #12 0x55daa462eb20 <unknown>\nE       #13 0x55daa4625023 <unknown>\nE       #14 0x55daa45f31aa <unknown>\nE       #15 0x55daa46496b8 <unknown>\nE       #16 0x55daa4649847 <unknown>\nE       #17 0x55daa4659243 <unknown>\nE       #18 0x7fdf6bd58609 start_thread\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_add_member.TestAddMember object at 0x000001DBAB2DB190>\n\n    @allure.story(\"通讯录入口添加成员\")\n    def test_add_member_from_memberlistpage(self):\n>       result = self.home.click_menu_contacts(). \\\n            click_add_member_btn(). \\\n            edit_member_and_save(self.fk.get_random_name(), self.fk.get_random_id(),\n                                 self.fk.get_random_phone()). \\\n            get_tips()\n\ntestcase\\test_add_member.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\addmember_page.py:23: in edit_member_and_save\n    self.do_find(*self.__BTN_SAVE_MEMBER).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.addmember_page.AddMemberPage object at 0x000001DBABF22DF0>, args = ('link text', '保存'), kwargs = {}\n\n    def inner(self, *args, **kwargs):\n        try:\n            return func(self, *args, **kwargs)\n        except Exception as e:\n            logger.error(e)\n            self.save_screenshot()\n            self.save_pagesource()\n>           raise Exception\nE           Exception\n\npage\\base.py:36: Exception"}, "steps": [{"name": "点击菜单：通讯录", "status": "passed", "start": 1690513917474, "stop": 1690513917893}, {"name": "点击【添加成员】按钮", "status": "passed", "start": 1690513918042, "stop": 1690513919834}, {"name": "输入姓名罗秀兰", "status": "passed", "start": 1690513919914, "stop": 1690513920102}, {"name": "输入用户id411723200404119996", "status": "passed", "start": 1690513920102, "stop": 1690513920381}, {"name": "输入电话14729685886", "status": "passed", "start": 1690513920381, "stop": 1690513920639}, {"name": "点击保存", "status": "broken", "statusDetails": {"message": "Exception\n", "trace": "  File \"D:\\pycharm\\Selenium\\page\\addmember_page.py\", line 23, in edit_member_and_save\n    self.do_find(*self.__BTN_SAVE_MEMBER).click()\n  File \"D:\\pycharm\\Selenium\\page\\base.py\", line 36, in inner\n    raise Exception\n"}, "attachments": [{"name": "error_image", "source": "7971ee08-93d5-4472-83a2-308757b9f68e-attachment.png", "type": "image/png"}, {"name": "pagesource", "source": "76c73946-2d41-48f8-80b0-4d5b4c92e359-attachment.txt", "type": "text/plain"}], "start": 1690513920639, "stop": 1690513925928}], "attachments": [{"name": "log", "source": "7811dbd1-dda6-40ee-be46-af0317ee71ab-attachment.txt", "type": "text/plain"}], "start": 1690513917472, "stop": 1690513925929, "uuid": "66cc6952-af2c-4b0f-adaf-e5f64b60d14e", "historyId": "3aba508366900283d13031bd490b5cdf", "testCaseId": "3aba508366900283d13031bd490b5cdf", "fullName": "testcase.test_add_member.TestAddMember#test_add_member_from_memberlistpage", "labels": [{"name": "feature", "value": "添加成员"}, {"name": "story", "value": "通讯录入口添加成员"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_add_member"}, {"name": "subSuite", "value": "TestAddMember"}, {"name": "host", "value": "DESKTOP-7Q67NG8"}, {"name": "thread", "value": "9824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_add_member"}]}